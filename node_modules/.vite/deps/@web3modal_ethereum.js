import {
  Connector,
  InjectedConnector,
  SwitchChainError,
  UserRejectedRequestError,
  __privateAdd,
  __privateGet,
  __privateMethod,
  __privateSet,
  __publicField,
  connect,
  disconnect,
  fetchBalance,
  fetchEnsAvatar,
  fetchEnsName,
  getAccount,
  getClient,
  getNetwork,
  lib_exports,
  normalizeChainId,
  require_utils,
  switchNetwork,
  watchAccount,
  watchNetwork
} from "./chunk-7MRXFADZ.js";
import "./chunk-B4ZX4RAS.js";
import {
  __toESM
} from "./chunk-JZQ37OGZ.js";

// node_modules/@wagmi/connectors/dist/walletConnect.js
var import_utils = __toESM(require_utils());
var NAMESPACE = "eip155";
var REQUESTED_CHAINS_KEY = "wagmi.requestedChains";
var ADD_ETH_CHAIN_METHOD = "wallet_addEthereumChain";
var _provider;
var _initProviderPromise;
var _createProvider;
var createProvider_fn;
var _initProvider;
var initProvider_fn;
var _isChainsStale;
var isChainsStale_fn;
var _setupListeners;
var setupListeners_fn;
var _removeListeners;
var removeListeners_fn;
var _setRequestedChainsIds;
var setRequestedChainsIds_fn;
var _getRequestedChainsIds;
var getRequestedChainsIds_fn;
var _getNamespaceChainsIds;
var getNamespaceChainsIds_fn;
var _getNamespaceMethods;
var getNamespaceMethods_fn;
var WalletConnectConnector = class extends Connector {
  constructor(config) {
    super({
      ...config,
      options: { isNewChainsStale: true, ...config.options }
    });
    __privateAdd(this, _createProvider);
    __privateAdd(this, _initProvider);
    __privateAdd(this, _isChainsStale);
    __privateAdd(this, _setupListeners);
    __privateAdd(this, _removeListeners);
    __privateAdd(this, _setRequestedChainsIds);
    __privateAdd(this, _getRequestedChainsIds);
    __privateAdd(this, _getNamespaceChainsIds);
    __privateAdd(this, _getNamespaceMethods);
    __publicField(this, "id", "walletConnect");
    __publicField(this, "name", "WalletConnect");
    __publicField(this, "ready", true);
    __privateAdd(this, _provider, void 0);
    __privateAdd(this, _initProviderPromise, void 0);
    __publicField(this, "onAccountsChanged", (accounts) => {
      if (accounts.length === 0)
        this.emit("disconnect");
      else
        this.emit("change", { account: (0, import_utils.getAddress)(accounts[0]) });
    });
    __publicField(this, "onChainChanged", (chainId) => {
      const id = Number(chainId);
      const unsupported = this.isChainUnsupported(id);
      this.emit("change", { chain: { id, unsupported } });
    });
    __publicField(this, "onDisconnect", () => {
      __privateMethod(this, _setRequestedChainsIds, setRequestedChainsIds_fn).call(this, []);
      this.emit("disconnect");
    });
    __publicField(this, "onDisplayUri", (uri) => {
      this.emit("message", { type: "display_uri", data: uri });
    });
    __publicField(this, "onConnect", () => {
      this.emit("connect", { provider: __privateGet(this, _provider) });
    });
    __privateMethod(this, _createProvider, createProvider_fn).call(this);
  }
  async connect({ chainId, pairingTopic } = {}) {
    var _a;
    try {
      let targetChainId = chainId;
      if (!targetChainId) {
        const lastUsedChainId = getClient().lastUsedChainId;
        if (lastUsedChainId && !this.isChainUnsupported(lastUsedChainId))
          targetChainId = lastUsedChainId;
        else
          targetChainId = (_a = this.chains[0]) == null ? void 0 : _a.id;
      }
      if (!targetChainId)
        throw new Error("No chains found on connector.");
      const provider = await this.getProvider();
      __privateMethod(this, _setupListeners, setupListeners_fn).call(this);
      const isChainsStale = __privateMethod(this, _isChainsStale, isChainsStale_fn).call(this);
      if (provider.session && isChainsStale)
        await provider.disconnect();
      if (!provider.session || isChainsStale) {
        const optionalChains = this.chains.filter((chain) => chain.id !== targetChainId).map((optionalChain) => optionalChain.id);
        this.emit("message", { type: "connecting" });
        await provider.connect({
          pairingTopic,
          chains: [targetChainId],
          optionalChains
        });
        __privateMethod(this, _setRequestedChainsIds, setRequestedChainsIds_fn).call(this, this.chains.map(({ id: id2 }) => id2));
      }
      const accounts = await provider.enable();
      const account = (0, import_utils.getAddress)(accounts[0]);
      const id = await this.getChainId();
      const unsupported = this.isChainUnsupported(id);
      return {
        account,
        chain: { id, unsupported },
        provider: new lib_exports.Web3Provider(provider)
      };
    } catch (error) {
      if (/user rejected/i.test(error == null ? void 0 : error.message)) {
        throw new UserRejectedRequestError(error);
      }
      throw error;
    }
  }
  async disconnect() {
    const provider = await this.getProvider();
    try {
      await provider.disconnect();
    } catch (error) {
      if (!/No matching key/i.test(error.message))
        throw error;
    } finally {
      __privateMethod(this, _removeListeners, removeListeners_fn).call(this);
      __privateMethod(this, _setRequestedChainsIds, setRequestedChainsIds_fn).call(this, []);
    }
  }
  async getAccount() {
    const { accounts } = await this.getProvider();
    return (0, import_utils.getAddress)(accounts[0]);
  }
  async getChainId() {
    const { chainId } = await this.getProvider();
    return chainId;
  }
  async getProvider({ chainId } = {}) {
    if (!__privateGet(this, _provider))
      await __privateMethod(this, _createProvider, createProvider_fn).call(this);
    if (chainId)
      await this.switchChain(chainId);
    return __privateGet(this, _provider);
  }
  async getSigner({ chainId } = {}) {
    const [provider, account] = await Promise.all([
      this.getProvider({ chainId }),
      this.getAccount()
    ]);
    return new lib_exports.Web3Provider(provider, chainId).getSigner(account);
  }
  async isAuthorized() {
    try {
      const [account, provider] = await Promise.all([
        this.getAccount(),
        this.getProvider()
      ]);
      const isChainsStale = __privateMethod(this, _isChainsStale, isChainsStale_fn).call(this);
      if (!account)
        return false;
      if (isChainsStale && provider.session) {
        try {
          await provider.disconnect();
        } catch {
        }
        return false;
      }
      return true;
    } catch {
      return false;
    }
  }
  async switchChain(chainId) {
    var _a;
    const chain = this.chains.find((chain2) => chain2.id === chainId);
    if (!chain)
      throw new SwitchChainError(new Error("chain not found on connector."));
    try {
      const provider = await this.getProvider();
      const namespaceChains = __privateMethod(this, _getNamespaceChainsIds, getNamespaceChainsIds_fn).call(this);
      const namespaceMethods = __privateMethod(this, _getNamespaceMethods, getNamespaceMethods_fn).call(this);
      const isChainApproved = namespaceChains.includes(chainId);
      if (!isChainApproved && namespaceMethods.includes(ADD_ETH_CHAIN_METHOD)) {
        await provider.request({
          method: ADD_ETH_CHAIN_METHOD,
          params: [
            {
              chainId: (0, import_utils.hexValue)(chain.id),
              blockExplorerUrls: [(_a = chain.blockExplorers) == null ? void 0 : _a.default],
              chainName: chain.name,
              nativeCurrency: chain.nativeCurrency,
              rpcUrls: [...chain.rpcUrls.default.http]
            }
          ]
        });
        const requestedChains = __privateMethod(this, _getRequestedChainsIds, getRequestedChainsIds_fn).call(this);
        requestedChains.push(chainId);
        __privateMethod(this, _setRequestedChainsIds, setRequestedChainsIds_fn).call(this, requestedChains);
      }
      await provider.request({
        method: "wallet_switchEthereumChain",
        params: [{ chainId: (0, import_utils.hexValue)(chainId) }]
      });
      return chain;
    } catch (error) {
      const message = typeof error === "string" ? error : error == null ? void 0 : error.message;
      if (/user rejected request/i.test(message)) {
        throw new UserRejectedRequestError(error);
      }
      throw new SwitchChainError(error);
    }
  }
};
_provider = /* @__PURE__ */ new WeakMap();
_initProviderPromise = /* @__PURE__ */ new WeakMap();
_createProvider = /* @__PURE__ */ new WeakSet();
createProvider_fn = async function() {
  if (!__privateGet(this, _initProviderPromise) && typeof window !== "undefined") {
    __privateSet(this, _initProviderPromise, __privateMethod(this, _initProvider, initProvider_fn).call(this));
  }
  return __privateGet(this, _initProviderPromise);
};
_initProvider = /* @__PURE__ */ new WeakSet();
initProvider_fn = async function() {
  const {
    default: EthereumProvider,
    OPTIONAL_EVENTS,
    OPTIONAL_METHODS
  } = await import("./index.es-4TGUPRRX.js");
  const [defaultChain, ...optionalChains] = this.chains.map(({ id }) => id);
  if (defaultChain) {
    const { projectId, showQrModal } = this.options;
    __privateSet(this, _provider, await EthereumProvider.init({
      showQrModal,
      projectId,
      optionalMethods: OPTIONAL_METHODS,
      optionalEvents: OPTIONAL_EVENTS,
      chains: [defaultChain],
      optionalChains,
      rpcMap: Object.fromEntries(
        this.chains.map((chain) => [
          chain.id,
          chain.rpcUrls.default.http[0]
        ])
      )
    }));
  }
};
_isChainsStale = /* @__PURE__ */ new WeakSet();
isChainsStale_fn = function() {
  const namespaceMethods = __privateMethod(this, _getNamespaceMethods, getNamespaceMethods_fn).call(this);
  if (namespaceMethods.includes(ADD_ETH_CHAIN_METHOD))
    return false;
  if (!this.options.isNewChainsStale)
    return false;
  const requestedChains = __privateMethod(this, _getRequestedChainsIds, getRequestedChainsIds_fn).call(this);
  const connectorChains = this.chains.map(({ id }) => id);
  const namespaceChains = __privateMethod(this, _getNamespaceChainsIds, getNamespaceChainsIds_fn).call(this);
  if (namespaceChains.length && !namespaceChains.some((id) => connectorChains.includes(id)))
    return false;
  return !connectorChains.every((id) => requestedChains.includes(id));
};
_setupListeners = /* @__PURE__ */ new WeakSet();
setupListeners_fn = function() {
  if (!__privateGet(this, _provider))
    return;
  __privateMethod(this, _removeListeners, removeListeners_fn).call(this);
  __privateGet(this, _provider).on("accountsChanged", this.onAccountsChanged);
  __privateGet(this, _provider).on("chainChanged", this.onChainChanged);
  __privateGet(this, _provider).on("disconnect", this.onDisconnect);
  __privateGet(this, _provider).on("session_delete", this.onDisconnect);
  __privateGet(this, _provider).on("display_uri", this.onDisplayUri);
  __privateGet(this, _provider).on("connect", this.onConnect);
};
_removeListeners = /* @__PURE__ */ new WeakSet();
removeListeners_fn = function() {
  if (!__privateGet(this, _provider))
    return;
  __privateGet(this, _provider).removeListener("accountsChanged", this.onAccountsChanged);
  __privateGet(this, _provider).removeListener("chainChanged", this.onChainChanged);
  __privateGet(this, _provider).removeListener("disconnect", this.onDisconnect);
  __privateGet(this, _provider).removeListener("session_delete", this.onDisconnect);
  __privateGet(this, _provider).removeListener("display_uri", this.onDisplayUri);
  __privateGet(this, _provider).removeListener("connect", this.onConnect);
};
_setRequestedChainsIds = /* @__PURE__ */ new WeakSet();
setRequestedChainsIds_fn = function(chains) {
  localStorage.setItem(REQUESTED_CHAINS_KEY, JSON.stringify(chains));
};
_getRequestedChainsIds = /* @__PURE__ */ new WeakSet();
getRequestedChainsIds_fn = function() {
  const data = localStorage.getItem(REQUESTED_CHAINS_KEY);
  return data ? JSON.parse(data) : [];
};
_getNamespaceChainsIds = /* @__PURE__ */ new WeakSet();
getNamespaceChainsIds_fn = function() {
  var _a, _b, _c;
  if (!__privateGet(this, _provider))
    return [];
  const chainIds = (_c = (_b = (_a = __privateGet(this, _provider).session) == null ? void 0 : _a.namespaces[NAMESPACE]) == null ? void 0 : _b.chains) == null ? void 0 : _c.map(
    (chain) => parseInt(chain.split(":")[1] || "")
  );
  return chainIds ?? [];
};
_getNamespaceMethods = /* @__PURE__ */ new WeakSet();
getNamespaceMethods_fn = function() {
  var _a, _b;
  if (!__privateGet(this, _provider))
    return [];
  const methods = (_b = (_a = __privateGet(this, _provider).session) == null ? void 0 : _a.namespaces[NAMESPACE]) == null ? void 0 : _b.methods;
  return methods ?? [];
};

// node_modules/@wagmi/connectors/dist/walletConnectLegacy.js
var import_utils2 = __toESM(require_utils());
var switchChainAllowedRegex = /(imtoken|metamask|rainbow|trust wallet)/i;
var _provider2;
var _switchChain;
var switchChain_fn;
var WalletConnectLegacyConnector = class extends Connector {
  constructor(config) {
    super(config);
    __privateAdd(this, _switchChain);
    __publicField(this, "id", "walletConnectLegacy");
    __publicField(this, "name", "WalletConnectLegacy");
    __publicField(this, "ready", true);
    __privateAdd(this, _provider2, void 0);
    __publicField(this, "onAccountsChanged", (accounts) => {
      if (accounts.length === 0)
        this.emit("disconnect");
      else
        this.emit("change", { account: (0, import_utils2.getAddress)(accounts[0]) });
    });
    __publicField(this, "onChainChanged", (chainId) => {
      const id = normalizeChainId(chainId);
      const unsupported = this.isChainUnsupported(id);
      this.emit("change", { chain: { id, unsupported } });
    });
    __publicField(this, "onDisconnect", () => {
      this.emit("disconnect");
    });
  }
  async connect({ chainId } = {}) {
    var _a, _b;
    try {
      let targetChainId = chainId;
      if (!targetChainId) {
        const lastUsedChainId = getClient().lastUsedChainId;
        if (lastUsedChainId && !this.isChainUnsupported(lastUsedChainId))
          targetChainId = lastUsedChainId;
      }
      const provider = await this.getProvider({
        chainId: targetChainId,
        create: true
      });
      provider.on("accountsChanged", this.onAccountsChanged);
      provider.on("chainChanged", this.onChainChanged);
      provider.on("disconnect", this.onDisconnect);
      setTimeout(() => this.emit("message", { type: "connecting" }), 0);
      const accounts = await provider.enable();
      const account = (0, import_utils2.getAddress)(accounts[0]);
      const id = await this.getChainId();
      const unsupported = this.isChainUnsupported(id);
      const walletName = ((_b = (_a = provider.connector) == null ? void 0 : _a.peerMeta) == null ? void 0 : _b.name) ?? "";
      if (switchChainAllowedRegex.test(walletName))
        this.switchChain = __privateMethod(this, _switchChain, switchChain_fn);
      return {
        account,
        chain: { id, unsupported },
        provider: new lib_exports.Web3Provider(
          provider
        )
      };
    } catch (error) {
      if (/user closed modal/i.test(error.message))
        throw new UserRejectedRequestError(error);
      throw error;
    }
  }
  async disconnect() {
    const provider = await this.getProvider();
    await provider.disconnect();
    provider.removeListener("accountsChanged", this.onAccountsChanged);
    provider.removeListener("chainChanged", this.onChainChanged);
    provider.removeListener("disconnect", this.onDisconnect);
    typeof localStorage !== "undefined" && localStorage.removeItem("walletconnect");
  }
  async getAccount() {
    const provider = await this.getProvider();
    const accounts = provider.accounts;
    return (0, import_utils2.getAddress)(accounts[0]);
  }
  async getChainId() {
    const provider = await this.getProvider();
    const chainId = normalizeChainId(provider.chainId);
    return chainId;
  }
  async getProvider({
    chainId,
    create
  } = {}) {
    var _a, _b;
    if (!__privateGet(this, _provider2) || chainId || create) {
      const rpc = !((_a = this.options) == null ? void 0 : _a.infuraId) ? this.chains.reduce(
        (rpc2, chain) => ({
          ...rpc2,
          [chain.id]: chain.rpcUrls.default.http[0]
        }),
        {}
      ) : {};
      const WalletConnectProvider = (await import("./esm-MUPK2XGL.js")).default;
      __privateSet(this, _provider2, new WalletConnectProvider({
        ...this.options,
        chainId,
        rpc: { ...rpc, ...(_b = this.options) == null ? void 0 : _b.rpc }
      }));
    }
    return __privateGet(this, _provider2);
  }
  async getSigner({ chainId } = {}) {
    const [provider, account] = await Promise.all([
      this.getProvider({ chainId }),
      this.getAccount()
    ]);
    return new lib_exports.Web3Provider(
      provider,
      chainId
    ).getSigner(account);
  }
  async isAuthorized() {
    try {
      const account = await this.getAccount();
      return !!account;
    } catch {
      return false;
    }
  }
};
_provider2 = /* @__PURE__ */ new WeakMap();
_switchChain = /* @__PURE__ */ new WeakSet();
switchChain_fn = async function(chainId) {
  const provider = await this.getProvider();
  const id = (0, import_utils2.hexValue)(chainId);
  try {
    await Promise.race([
      provider.request({
        method: "wallet_switchEthereumChain",
        params: [{ chainId: id }]
      }),
      new Promise(
        (res) => this.on("change", ({ chain }) => {
          if ((chain == null ? void 0 : chain.id) === chainId)
            res(chainId);
        })
      )
    ]);
    return this.chains.find((x) => x.id === chainId) ?? {
      id: chainId,
      name: `Chain ${id}`,
      network: `${id}`,
      nativeCurrency: { name: "Ether", decimals: 18, symbol: "ETH" },
      rpcUrls: { default: { http: [""] }, public: { http: [""] } }
    };
  } catch (error) {
    const message = typeof error === "string" ? error : error == null ? void 0 : error.message;
    if (/user rejected request/i.test(message))
      throw new UserRejectedRequestError(error);
    throw new SwitchChainError(error);
  }
};

// node_modules/@wagmi/core/dist/providers/jsonRpc.js
function jsonRpcProvider({
  priority,
  rpc,
  stallTimeout,
  static: static_ = true,
  weight
}) {
  return function(chain) {
    const rpcConfig = rpc(chain);
    if (!rpcConfig || rpcConfig.http === "")
      return null;
    return {
      chain: {
        ...chain,
        rpcUrls: {
          ...chain.rpcUrls,
          default: { http: [rpcConfig.http] }
        }
      },
      provider: () => {
        var _a, _b;
        const RpcProvider = static_ ? lib_exports.StaticJsonRpcProvider : lib_exports.JsonRpcProvider;
        const provider = new RpcProvider(rpcConfig.http, {
          ensAddress: (_b = (_a = chain.contracts) == null ? void 0 : _a.ensRegistry) == null ? void 0 : _b.address,
          chainId: chain.id,
          name: chain.network
        });
        return Object.assign(provider, { priority, stallTimeout, weight });
      },
      ...rpcConfig.webSocket && {
        webSocketProvider: () => new lib_exports.WebSocketProvider(
          rpcConfig.webSocket,
          chain.id
        )
      }
    };
  };
}

// node_modules/@web3modal/ethereum/dist/index.js
var A = class {
  constructor(n, t) {
    this.wagmi = {}, this.walletConnectUri = "", this.walletConnectVersion = 1, this.chains = [], this.namespace = "eip155", this.disconnect = disconnect, this.getAccount = getAccount, this.watchAccount = watchAccount, this.fetchBalance = fetchBalance, this.getNetwork = getNetwork, this.watchNetwork = watchNetwork, this.switchNetwork = switchNetwork, this.fetchEnsName = fetchEnsName, this.fetchEnsAvatar = fetchEnsAvatar, this.wagmi = n, this.chains = t;
    const { isV2: e } = this.getWalletConnectConnectors();
    this.walletConnectVersion = e ? 2 : 1;
  }
  getDefaultConnectorChainId(n) {
    return n.chains[0].id;
  }
  getWalletConnectConnectors() {
    const n = this.wagmi.connectors.find((c) => c.id === "walletConnect"), t = this.wagmi.connectors.find((c) => c.id === "walletConnectLegacy"), e = n ?? t;
    if (!e)
      throw new Error("WalletConnectConnector or WalletConnectLegacyConnector is required");
    return { isV2: !!n, connector: e };
  }
  async connectWalletConnectV1(n, t) {
    return new Promise((e, c) => {
      n.once("message", async ({ type: r }) => {
        if (r === "connecting") {
          const o = (await n.getProvider()).connector;
          this.walletConnectUri = o.uri, t(o.uri), o.on("disconnect", () => {
            c(Error());
          }), o.on("connect", () => {
            e();
          });
        }
      });
    });
  }
  async connectWalletConnectV2(n, t) {
    const e = await n.getProvider();
    let c = "";
    return new Promise((r) => {
      e.once("display_uri", (o) => {
        this.walletConnectUri = o, c = o, t(o);
      }), e.once("connect", () => {
        c === this.walletConnectUri && r();
      });
    });
  }
  getDefaultChain() {
    const n = this.chains.find((t) => t.id === 1);
    return n ?? this.chains[0];
  }
  getConnectorById(n) {
    const t = this.wagmi.connectors.find((e) => e.id === n);
    if (!t)
      throw new Error(`Connector for id ${n} was not found`);
    return t;
  }
  getConnectors() {
    return this.wagmi.connectors.filter((n) => !n.id.includes("walletConnect"));
  }
  async connectWalletConnect(n, t) {
    const { connector: e, isV2: c } = this.getWalletConnectConnectors(), r = t ?? this.getDefaultConnectorChainId(e), o = c ? this.connectWalletConnectV2.bind(this) : this.connectWalletConnectV1.bind(this), [a] = await Promise.all([connect({ connector: e, chainId: r }), o(e, n)]);
    return a;
  }
  async connectConnector(n, t) {
    const e = this.getConnectorById(n), c = t ?? this.getDefaultConnectorChainId(e);
    return await connect({ connector: e, chainId: c });
  }
};
var v = "eip155";
function P({ projectId: i }) {
  return jsonRpcProvider({ rpc: (n) => {
    var t;
    return [1, 3, 4, 5, 10, 42, 56, 69, 97, 100, 137, 420, 42161, 42220, 43114, 80001, 421611, 421613, 1313161554, 11297108109].includes(n.id) ? { http: `https://rpc.walletconnect.com/v1/?chainId=${v}:${n.id}&projectId=${i}` } : { http: n.rpcUrls.default.http[0], webSocket: (t = n.rpcUrls.default.webSocket) == null ? void 0 : t[0] };
  } });
}
function j({ chains: i, version: n, projectId: t }) {
  const e = n === 1, c = [new InjectedConnector({ chains: i, options: { shimDisconnect: true, shimChainChangedDisconnect: true } })];
  return e ? c.unshift(new WalletConnectLegacyConnector({ chains: i, options: { qrcode: false } })) : c.unshift(new WalletConnectConnector({ chains: i, options: { projectId: t, showQrModal: false } })), c;
}
export {
  A as EthereumClient,
  j as w3mConnectors,
  P as w3mProvider
};
//# sourceMappingURL=@web3modal_ethereum.js.map
